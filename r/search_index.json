[["index.html", "Arrow Cookbook 1 Preface", " Arrow Cookbook 1 Preface This cookbook aims to provide a number of recipes showing how to perform common tasks using arrow. "],["reading-and-writing-data.html", "2 Reading and Writing Data 2.1 Converting from a data frame to an Arrow Table 2.2 Converting data from an Arrow Table to a data frame 2.3 Writing a Parquet file 2.4 Reading a Parquet file 2.5 Read a Parquet file from S3 2.6 Filter columns while reading a Parquet file 2.7 Write an IPC/Feather V2 file 2.8 Read a Feather file 2.9 Write Streaming IPC Files 2.10 Read Streaming IPC Files 2.11 Reading and Writing CSV files 2.12 Read JSON files 2.13 Write Partitioned Data 2.14 Reading Partitioned Data", " 2 Reading and Writing Data This chapter contains recipes related to reading and writing data using Apache Arrow. When reading files into R using Apache Arrow, you can choose to read in your file as either a data frame or as an Arrow Table object. There are a number of circumstances in which you may want to read in the data as an Arrow Table: * your dataset is large and if you load it into memory, it may lead to performance issues * you want faster performance from your dplyr queries * you want to be able to take advantage of Arrowâ€™s compute functions 2.1 Converting from a data frame to an Arrow Table You want to convert an existing data.frame or tibble object into an Arrow Table. 2.1.1 Solution air_table &lt;- Table$create(airquality) air_table ## Table ## 153 rows x 6 columns ## $Ozone &lt;int32&gt; ## $Solar.R &lt;int32&gt; ## $Wind &lt;double&gt; ## $Temp &lt;int32&gt; ## $Month &lt;int32&gt; ## $Day &lt;int32&gt; ## ## See $metadata for additional Schema metadata 2.2 Converting data from an Arrow Table to a data frame You want to convert an Arrow Table to a data frame to view the data or work with it in your usual analytics pipeline. You can use either as.data.frame() or dplyr::collect() to do this. 2.2.1 Solution air_df &lt;- as.data.frame(air_table) air_df ## Ozone Solar.R Wind Temp Month Day ## 1 41 190 7.4 67 5 1 ## 2 36 118 8.0 72 5 2 ## 3 12 149 12.6 74 5 3 ## 4 18 313 11.5 62 5 4 ## 5 NA NA 14.3 56 5 5 ## 6 28 NA 14.9 66 5 6 ## 7 23 299 8.6 65 5 7 ## 8 19 99 13.8 59 5 8 ## 9 8 19 20.1 61 5 9 ## 10 NA 194 8.6 69 5 10 ## 11 7 NA 6.9 74 5 11 ## 12 16 256 9.7 69 5 12 ## 13 11 290 9.2 66 5 13 ## 14 14 274 10.9 68 5 14 ## 15 18 65 13.2 58 5 15 ## 16 14 334 11.5 64 5 16 ## 17 34 307 12.0 66 5 17 ## 18 6 78 18.4 57 5 18 ## 19 30 322 11.5 68 5 19 ## 20 11 44 9.7 62 5 20 ## 21 1 8 9.7 59 5 21 ## 22 11 320 16.6 73 5 22 ## 23 4 25 9.7 61 5 23 ## 24 32 92 12.0 61 5 24 ## 25 NA 66 16.6 57 5 25 ## 26 NA 266 14.9 58 5 26 ## 27 NA NA 8.0 57 5 27 ## 28 23 13 12.0 67 5 28 ## 29 45 252 14.9 81 5 29 ## 30 115 223 5.7 79 5 30 ## 31 37 279 7.4 76 5 31 ## 32 NA 286 8.6 78 6 1 ## 33 NA 287 9.7 74 6 2 ## 34 NA 242 16.1 67 6 3 ## 35 NA 186 9.2 84 6 4 ## 36 NA 220 8.6 85 6 5 ## 37 NA 264 14.3 79 6 6 ## 38 29 127 9.7 82 6 7 ## 39 NA 273 6.9 87 6 8 ## 40 71 291 13.8 90 6 9 ## 41 39 323 11.5 87 6 10 ## 42 NA 259 10.9 93 6 11 ## 43 NA 250 9.2 92 6 12 ## 44 23 148 8.0 82 6 13 ## 45 NA 332 13.8 80 6 14 ## 46 NA 322 11.5 79 6 15 ## 47 21 191 14.9 77 6 16 ## 48 37 284 20.7 72 6 17 ## 49 20 37 9.2 65 6 18 ## 50 12 120 11.5 73 6 19 ## 51 13 137 10.3 76 6 20 ## 52 NA 150 6.3 77 6 21 ## 53 NA 59 1.7 76 6 22 ## 54 NA 91 4.6 76 6 23 ## 55 NA 250 6.3 76 6 24 ## 56 NA 135 8.0 75 6 25 ## 57 NA 127 8.0 78 6 26 ## 58 NA 47 10.3 73 6 27 ## 59 NA 98 11.5 80 6 28 ## 60 NA 31 14.9 77 6 29 ## 61 NA 138 8.0 83 6 30 ## 62 135 269 4.1 84 7 1 ## 63 49 248 9.2 85 7 2 ## 64 32 236 9.2 81 7 3 ## 65 NA 101 10.9 84 7 4 ## 66 64 175 4.6 83 7 5 ## 67 40 314 10.9 83 7 6 ## 68 77 276 5.1 88 7 7 ## 69 97 267 6.3 92 7 8 ## 70 97 272 5.7 92 7 9 ## 71 85 175 7.4 89 7 10 ## 72 NA 139 8.6 82 7 11 ## 73 10 264 14.3 73 7 12 ## 74 27 175 14.9 81 7 13 ## 75 NA 291 14.9 91 7 14 ## 76 7 48 14.3 80 7 15 ## 77 48 260 6.9 81 7 16 ## 78 35 274 10.3 82 7 17 ## 79 61 285 6.3 84 7 18 ## 80 79 187 5.1 87 7 19 ## 81 63 220 11.5 85 7 20 ## 82 16 7 6.9 74 7 21 ## 83 NA 258 9.7 81 7 22 ## 84 NA 295 11.5 82 7 23 ## 85 80 294 8.6 86 7 24 ## 86 108 223 8.0 85 7 25 ## 87 20 81 8.6 82 7 26 ## 88 52 82 12.0 86 7 27 ## 89 82 213 7.4 88 7 28 ## 90 50 275 7.4 86 7 29 ## 91 64 253 7.4 83 7 30 ## 92 59 254 9.2 81 7 31 ## 93 39 83 6.9 81 8 1 ## 94 9 24 13.8 81 8 2 ## 95 16 77 7.4 82 8 3 ## 96 78 NA 6.9 86 8 4 ## 97 35 NA 7.4 85 8 5 ## 98 66 NA 4.6 87 8 6 ## 99 122 255 4.0 89 8 7 ## 100 89 229 10.3 90 8 8 ## 101 110 207 8.0 90 8 9 ## 102 NA 222 8.6 92 8 10 ## 103 NA 137 11.5 86 8 11 ## 104 44 192 11.5 86 8 12 ## 105 28 273 11.5 82 8 13 ## 106 65 157 9.7 80 8 14 ## 107 NA 64 11.5 79 8 15 ## 108 22 71 10.3 77 8 16 ## 109 59 51 6.3 79 8 17 ## 110 23 115 7.4 76 8 18 ## 111 31 244 10.9 78 8 19 ## 112 44 190 10.3 78 8 20 ## 113 21 259 15.5 77 8 21 ## 114 9 36 14.3 72 8 22 ## 115 NA 255 12.6 75 8 23 ## 116 45 212 9.7 79 8 24 ## 117 168 238 3.4 81 8 25 ## 118 73 215 8.0 86 8 26 ## 119 NA 153 5.7 88 8 27 ## 120 76 203 9.7 97 8 28 ## 121 118 225 2.3 94 8 29 ## 122 84 237 6.3 96 8 30 ## 123 85 188 6.3 94 8 31 ## 124 96 167 6.9 91 9 1 ## 125 78 197 5.1 92 9 2 ## 126 73 183 2.8 93 9 3 ## 127 91 189 4.6 93 9 4 ## 128 47 95 7.4 87 9 5 ## 129 32 92 15.5 84 9 6 ## 130 20 252 10.9 80 9 7 ## 131 23 220 10.3 78 9 8 ## 132 21 230 10.9 75 9 9 ## 133 24 259 9.7 73 9 10 ## 134 44 236 14.9 81 9 11 ## 135 21 259 15.5 76 9 12 ## 136 28 238 6.3 77 9 13 ## 137 9 24 10.9 71 9 14 ## 138 13 112 11.5 71 9 15 ## 139 46 237 6.9 78 9 16 ## 140 18 224 13.8 67 9 17 ## 141 13 27 10.3 76 9 18 ## 142 24 238 10.3 68 9 19 ## 143 16 201 8.0 82 9 20 ## 144 13 238 12.6 64 9 21 ## 145 23 14 9.2 71 9 22 ## 146 36 139 10.3 81 9 23 ## 147 7 49 10.3 69 9 24 ## 148 14 20 16.6 63 9 25 ## 149 30 193 6.9 70 9 26 ## 150 NA 145 13.2 77 9 27 ## 151 14 191 14.3 75 9 28 ## 152 18 131 8.0 76 9 29 ## 153 20 223 11.5 68 9 30 2.3 Writing a Parquet file You want to write Parquet files to disk. 2.3.1 Solution # Create table my_table &lt;- Table$create(data.frame(group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99))) # Write to Parquet write_parquet(my_table, &quot;my_table.parquet&quot;) 2.4 Reading a Parquet file You want to read a Parquet file. 2.4.1 Solution parquet_tbl &lt;- read_parquet(&quot;my_table.parquet&quot;) parquet_tbl ## group score ## 1 A 99 ## 2 B 97 ## 3 C 99 As the argument as_data_frame was left set to its default value of TRUE, the file was read in as a data.frame object. class(parquet_tbl) ## [1] &quot;data.frame&quot; 2.4.2 Discussion If you set as_data_frame to FALSE, the file will be read in as an Arrow Table. my_table_arrow_table &lt;- read_parquet(&quot;my_table.parquet&quot;, as_data_frame = FALSE) my_table_arrow_table ## Table ## 3 rows x 2 columns ## $group &lt;string&gt; ## $score &lt;double&gt; ## ## See $metadata for additional Schema metadata class(my_table_arrow_table) ## [1] &quot;Table&quot; &quot;ArrowTabular&quot; &quot;ArrowObject&quot; &quot;R6&quot; 2.5 Read a Parquet file from S3 You want to read a Parquet file from S3. 2.5.1 Solution df &lt;- read_parquet(file = &quot;s3://ursa-labs-taxi-data/2019/06/data.parquet&quot;) 2.5.2 See also For more in-depth instructions, including how to work with S3 buckets which require authentication, you can find a guide to reading and writing to/from S3 buckets here: https://arrow.apache.org/docs/r/articles/fs.html. 2.6 Filter columns while reading a Parquet file You want to specify which columns to include when reading in a Parquet file. 2.6.1 Solution # Create table to read back in dist_time &lt;- Table$create(data.frame(distance = c(12.2, 15.7, 14.2), time = c(43, 44, 40))) # Write to Parquet write_parquet(dist_time, &quot;dist_time.parquet&quot;) # Read in only the &quot;time&quot; column time_only &lt;- read_parquet(&quot;dist_time.parquet&quot;, col_select = &quot;time&quot;) time_only ## time ## 1 43 ## 2 44 ## 3 40 2.7 Write an IPC/Feather V2 file You want to read in a Feather file. 2.7.1 Solution my_table &lt;- Table$create(data.frame(group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99))) write_feather(my_table, &quot;my_table.arrow&quot;) 2.7.2 Discussion For legacy support, you can write data in the original Feather format by setting the version parameter to 1. # Create table my_table &lt;- Table$create(data.frame(group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99))) # Write to Feather format V1 write_feather(mtcars, &quot;my_table.feather&quot;, version = 1) 2.8 Read a Feather file You want to read a Feather file. 2.8.1 Solution my_feather_tbl &lt;- read_feather(&quot;my_table.arrow&quot;) 2.9 Write Streaming IPC Files You want to write to the IPC stream format. 2.9.1 Solution # Create table my_table &lt;- Table$create( data.frame( group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99) ) ) # Write to IPC stream format write_ipc_stream(my_table, &quot;my_table.arrows&quot;) 2.10 Read Streaming IPC Files You want to read from the IPC stream format. 2.10.1 Solution my_ipc_stream &lt;- arrow::read_ipc_stream(&quot;my_table.arrows&quot;) 2.11 Reading and Writing CSV files You can use write_csv_arrow() to save an Arrow Table to disk as a CSV. write_csv_arrow(cars, &quot;cars.csv&quot;) You can use read_csv_arrow() to read in a CSV file as an Arrow Table. my_csv &lt;- read_csv_arrow(&quot;cars.csv&quot;, as_data_frame = FALSE) 2.12 Read JSON files You want to read a JSON file. 2.12.1 Solution # Create a file to read back in tf &lt;- tempfile() writeLines(&#39; {&quot;country&quot;: &quot;United Kingdom&quot;, &quot;code&quot;: &quot;GB&quot;, &quot;long&quot;: -3.44, &quot;lat&quot;: 55.38} {&quot;country&quot;: &quot;France&quot;, &quot;code&quot;: &quot;FR&quot;, &quot;long&quot;: 2.21, &quot;lat&quot;: 46.23} {&quot;country&quot;: &quot;Germany&quot;, &quot;code&quot;: &quot;DE&quot;, &quot;long&quot;: 10.45, &quot;lat&quot;: 51.17} &#39;, tf, useBytes = TRUE) # Read in the data countries &lt;- read_json_arrow(tf, col_select = c(&quot;country&quot;, &quot;long&quot;, &quot;lat&quot;)) countries ## # A tibble: 3 Ã— 3 ## country long lat ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United Kingdom -3.44 55.4 ## 2 France 2.21 46.2 ## 3 Germany 10.4 51.2 2.13 Write Partitioned Data You want to save data to disk in partitions based on columns in the data. 2.13.1 Solution write_dataset(airquality, &quot;airquality_partitioned&quot;, partitioning = c(&quot;Month&quot;, &quot;Day&quot;)) list.files(&quot;airquality_partitioned&quot;) ## [1] &quot;Month=5&quot; &quot;Month=6&quot; &quot;Month=7&quot; &quot;Month=8&quot; &quot;Month=9&quot; As you can see, this has created folders based on the first partition variable supplied, Month. If you take a look in one of these folders, you will see that the data is then partitioned by the second partition variable, Day. list.files(&quot;airquality_partitioned/Month=5&quot;) ## [1] &quot;Day=1&quot; &quot;Day=10&quot; &quot;Day=11&quot; &quot;Day=12&quot; &quot;Day=13&quot; &quot;Day=14&quot; &quot;Day=15&quot; &quot;Day=16&quot; ## [9] &quot;Day=17&quot; &quot;Day=18&quot; &quot;Day=19&quot; &quot;Day=2&quot; &quot;Day=20&quot; &quot;Day=21&quot; &quot;Day=22&quot; &quot;Day=23&quot; ## [17] &quot;Day=24&quot; &quot;Day=25&quot; &quot;Day=26&quot; &quot;Day=27&quot; &quot;Day=28&quot; &quot;Day=29&quot; &quot;Day=3&quot; &quot;Day=30&quot; ## [25] &quot;Day=31&quot; &quot;Day=4&quot; &quot;Day=5&quot; &quot;Day=6&quot; &quot;Day=7&quot; &quot;Day=8&quot; &quot;Day=9&quot; Each of these folders contains 1 or more Parquet files containing the relevant partition of the data. list.files(&quot;airquality_partitioned/Month=5/Day=10&quot;) ## [1] &quot;part-9.parquet&quot; 2.14 Reading Partitioned Data You want to read partitioned data. 2.14.1 Solution # Read data from directory air_data &lt;- open_dataset(&quot;airquality_partitioned&quot;) # View data air_data ## FileSystemDataset with 153 Parquet files ## Ozone: int32 ## Solar.R: int32 ## Wind: double ## Temp: int32 ## Month: int32 ## Day: int32 ## ## See $metadata for additional Schema metadata unlink(&quot;airquality_partitioned&quot;, recursive = TRUE) "],["creating-arrow-objects.html", "3 Creating Arrow Objects 3.1 Create an Arrow Array from an R object 3.2 Create a Arrow Table from an R object 3.3 View the contents of an Arrow Table or RecordBatch 3.4 Manually create a RecordBatch from an R object.", " 3 Creating Arrow Objects 3.1 Create an Arrow Array from an R object You want to convert an existing vector in R to an Arrow Array object. 3.1.1 Solution # Create an example vector score = c(99, 97, 99) # Convert to Arrow Array score_array &lt;- Array$create(score) # View Array score_array ## Array ## &lt;double&gt; ## [ ## 99, ## 97, ## 99 ## ] 3.2 Create a Arrow Table from an R object You want to convert an existing data frame in R to an Arrow Table object. 3.2.1 Solution # Create an example data frame my_tibble &lt;- tibble::tibble(group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99)) # Convert to Arrow Table my_table &lt;- Table$create(my_tibble) # View table my_table ## Table ## 3 rows x 2 columns ## $group &lt;string&gt; ## $score &lt;double&gt; 3.3 View the contents of an Arrow Table or RecordBatch You want to view the contents of an Arrow Table or RecordBatch. 3.3.1 Solution # View Table dplyr::collect(my_table) ## # A tibble: 3 Ã— 2 ## group score ## &lt;chr&gt; &lt;dbl&gt; ## 1 A 99 ## 2 B 97 ## 3 C 99 3.4 Manually create a RecordBatch from an R object. You want to convert an existing data frame in R to an Arrow RecordBatch object. 3.4.1 Solution # Create an example data frame my_tibble &lt;- tibble::tibble(group = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), score = c(99, 97, 99)) # Convert to Arrow RecordBatch my_record_batch &lt;- record_batch(my_tibble) # View RecordBatch my_record_batch ## RecordBatch ## 3 rows x 2 columns ## $group &lt;string&gt; ## $score &lt;double&gt; "],["defining-data-types.html", "4 Defining Data Types 4.1 Update the data type of an existing Arrow Array 4.2 Update the data type of a field in an existing Arrow Table 4.3 Specify data types when creating an Arrow table from an R object 4.4 Specify data types when reading in files", " 4 Defining Data Types As discussed in previous chapters, Arrow automatically infers the most appropriate data type when reading in data or converting R objects to Arrow objects. However, you might want to manually tell Arrow which data types to use, for example, to ensure interoperability with databases and data warehouse systems. This chapter includes recipes for: changing the data types of existing Arrow objects defining data types during the process of creating Arrow objects A table showing the default mappings between R and Arrow data types can be found in R data type to Arrow data type mappings. A table containing Arrow data types, and their R equivalents can be found in Arrow data type to R data type mapping. 4.1 Update the data type of an existing Arrow Array You want to change the data type of an existing Arrow Array. 4.1.1 Solution # Create an Array to cast integer_arr &lt;- Array$create(1:5) # Cast to an unsigned int8 type uint_arr &lt;- integer_arr$cast(target_type = uint8()) uint_arr ## Array ## &lt;uint8&gt; ## [ ## 1, ## 2, ## 3, ## 4, ## 5 ## ] 4.1.2 Discussion There are some data types which are not compatible with each other. Errors will occur if you try to cast between incompatible data types. int_arr &lt;- Array$create(1:5) int_arr$cast(target_type = binary()) ## Error: NotImplemented: Unsupported cast from int32 to binary using function cast_binary 4.2 Update the data type of a field in an existing Arrow Table You want to change the type of one or more fields in an existing Arrow Table. 4.2.1 Solution # Set up a tibble to use in this example oscars &lt;- tibble::tibble( actor = c(&quot;Katharine Hepburn&quot;, &quot;Meryl Streep&quot;, &quot;Jack Nicholson&quot;), num_awards = c(4, 3, 3) ) # Convert tibble to an Arrow table oscars_arrow &lt;- Table$create(oscars) # The default mapping from numeric column &quot;num_awards&quot; is to a double oscars_arrow ## Table ## 3 rows x 2 columns ## $actor &lt;string&gt; ## $num_awards &lt;double&gt; # Set up schema with &quot;num_awards&quot; as integer oscars_schema &lt;- schema(actor = string(), num_awards = int16()) # Cast to an int16 oscars_arrow_int &lt;- oscars_arrow$cast(target_schema = oscars_schema) oscars_arrow_int ## Table ## 3 rows x 2 columns ## $actor &lt;string&gt; ## $num_awards &lt;int16&gt; 4.2.2 Discussion There are some Arrow data types which do not have any R equivalent. Attempting to cast to these data types or using a schema which contains them will result in an error. # Set up a tibble to use in this example oscars &lt;- tibble::tibble( actor = c(&quot;Katharine Hepburn&quot;, &quot;Meryl Streep&quot;, &quot;Jack Nicholson&quot;), num_awards = c(4, 3, 3) ) # Convert tibble to an Arrow table oscars_arrow &lt;- Table$create(oscars) # Set up schema with &quot;num_awards&quot; as float16 which doesn&#39;t have an R equivalent oscars_schema_invalid &lt;- schema(actor = string(), num_awards = float16()) # The default mapping from numeric column &quot;num_awards&quot; is to a double oscars_arrow$cast(target_schema = oscars_schema_invalid) ## Error: NotImplemented: Unsupported cast from double to halffloat using function cast_half_float 4.3 Specify data types when creating an Arrow table from an R object You want to manually specify Arrow data types when converting an object from a data frame to an Arrow object. 4.3.1 Solution # Set up a tibble to use in this example oscars &lt;- tibble::tibble( actor = c(&quot;Katharine Hepburn&quot;, &quot;Meryl Streep&quot;, &quot;Jack Nicholson&quot;), num_awards = c(4, 3, 3) ) # Set up schema with &quot;num_awards&quot; as integer oscars_schema &lt;- schema(actor = string(), num_awards = int16()) # create arrow Table containing data and schema oscars_data_arrow &lt;- Table$create(oscars, schema = oscars_schema) oscars_data_arrow ## Table ## 3 rows x 2 columns ## $actor &lt;string&gt; ## $num_awards &lt;int16&gt; 4.4 Specify data types when reading in files You want to manually specify Arrow data types when reading in files. 4.4.1 Solution # Set up a tibble to use in this example oscars &lt;- tibble::tibble( actor = c(&quot;Katharine Hepburn&quot;, &quot;Meryl Streep&quot;, &quot;Jack Nicholson&quot;), num_awards = c(4, 3, 3) ) # write dataset to disk write_dataset(oscars, path = &quot;oscars_data&quot;) # Set up schema with &quot;num_awards&quot; as integer oscars_schema &lt;- schema(actor = string(), num_awards = int16()) # read the dataset in, using the schema instead of inferring the type automatically oscars_dataset_arrow &lt;- open_dataset(&quot;oscars_data&quot;, schema = oscars_schema) oscars_dataset_arrow ## FileSystemDataset with 1 Parquet file ## actor: string ## num_awards: int16 "],["manipulating-data.html", "5 Manipulating Data 5.1 Computing Mean/Min/Max, etc value of an Array 5.2 Counting occurrences of elements in an Array 5.3 Applying arithmetic functions to Arrays.", " 5 Manipulating Data 5.1 Computing Mean/Min/Max, etc value of an Array Many base R generic functions such as mean(), min(), and max() have been mapped to their Arrow equivalents, and so can be called on Arrow Array objects in the same way. They will return Arrow objects themselves. my_values &lt;- Array$create(c(1:5, NA)) mean(my_values, na.rm = TRUE) ## Scalar ## 3 If you want to use an R function which does not have an Arrow mapping, you can use as.vector() to convert Arrow objects to base R vectors. fivenum(as.vector(my_values)) ## [1] 1 2 3 4 5 5.2 Counting occurrences of elements in an Array Some functions in the Arrow R package do not have base R equivalents. In other cases, the base R equivalents are not generic functions so they cannot be called directly on Arrow Array objects. For example, the value_count() function in the Arrow R package is loosely equivalent to the base R function table(), which is not a generic function. To count the elements in an R vector, you can use table(); to count the elements in an Arrow Array, you can use value_count(). repeated_vals &lt;- Array$create(c(1, 1, 2, 3, 3, 3, 3, 3)) value_counts(repeated_vals) ## StructArray ## &lt;struct&lt;values: double, counts: int64&gt;&gt; ## -- is_valid: all not null ## -- child 0 type: double ## [ ## 1, ## 2, ## 3 ## ] ## -- child 1 type: int64 ## [ ## 2, ## 1, ## 5 ## ] 5.3 Applying arithmetic functions to Arrays. You can use the various arithmetic operators on Array objects. num_array &lt;- Array$create(1:10) num_array + 10 ## Array ## &lt;double&gt; ## [ ## 11, ## 12, ## 13, ## 14, ## 15, ## 16, ## 17, ## 18, ## 19, ## 20 ## ] You will get the same result if you pass in the value youâ€™re adding as an Arrow object. num_array + Scalar$create(10) ## Array ## &lt;double&gt; ## [ ## 11, ## 12, ## 13, ## 14, ## 15, ## 16, ## 17, ## 18, ## 19, ## 20 ## ] "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
